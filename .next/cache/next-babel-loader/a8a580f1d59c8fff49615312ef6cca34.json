{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Container } from \"../components/Container\";\nimport { Typography } from \"@material-ui/core\";\nvar publicVapidKey = \"BCj54G9kp6-MuxVje45_rEdNd24WnFaDLOquVDqrdeqGy_NwwaeTovYJoKdP429zTri6hqypw4TXKMFF6a57aMQ\";\n\nfunction urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\nvar notification = /*#__PURE__*/function (_Component) {\n  _inherits(notification, _Component);\n\n  var _super = _createSuper(notification);\n\n  function notification(props) {\n    var _this;\n\n    _classCallCheck(this, notification);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"configurePushSubscription\", function () {\n      _this.setState({\n        loading: true\n      });\n\n      console.log(\"you are inside the web notification subscription code !!\");\n\n      if (!'Notification' in navigator) {\n        return;\n      }\n\n      var swRef;\n      navigator.serviceWorker.ready.then(function (sw) {\n        swRef = sw;\n        return swRef.pushManager.getSubscription(); // this allow to get the subscripition \n      }).then(function (sub) {\n        if (sub === null) {\n          // create a new subscription \n          console.log(\"we dont have the subcription\");\n          return swRef.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n          }).then(function (subscription) {\n            console.log(\"user is subscribed\", subscription);\n          });\n        } else {\n          // we have a subscription ;\n          console.log(\"we have the subcription\", sub);\n          return sub;\n        }\n      }).then(function (newSub) {\n        // here you have to store this newsbu i.e. your subscription user to database\n        // with the help of newSub Request payload // you get the endpoing and keys {p256dh , auth}\n        // which is used to send the notification to the user \n        console.log(\"this is subsciriton body\", newSub);\n        var urlDb = \"https://pwa-serv-notify.herokuapp.com/api/pwa/subscribe\";\n        return fetch(urlDb, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(newSub)\n        });\n      }).then(function (res) {\n        if (res.ok) {\n          console.log(\"new subscriber is added to DB \", res);\n          this.setState({\n            loading: false\n          });\n          var subBtn = document.getElementById(\"sub-notification\");\n          subBtn.style.display = \"none\";\n        }\n      })[\"catch\"](function (err) {\n        this.setState({\n          loading: false\n        });\n        console.log(\"server : App subscriber error \", err);\n      });\n    });\n\n    _this.state = {\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(notification, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", null, __jsx(Container, null, __jsx(Typography, {\n        children: \"Notification\",\n        variant: \"h6\"\n      }), this.state.isLoading && __jsx(\"h3\", null, \"Loading...\"), __jsx(\"h6\", null, \"Start Notification from server \"), __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.configurePushSubscription();\n        }\n      }, \"Start Server Notification\")));\n    }\n  }]);\n\n  return notification;\n}(Component);\n\nexport { notification as default };","map":null,"metadata":{},"sourceType":"module"}