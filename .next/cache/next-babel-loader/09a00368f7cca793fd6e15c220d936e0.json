{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Container } from \"../components/Container\";\nimport { Typography } from \"@material-ui/core\";\nconst publicVapidKey = \"BCj54G9kp6-MuxVje45_rEdNd24WnFaDLOquVDqrdeqGy_NwwaeTovYJoKdP429zTri6hqypw4TXKMFF6a57aMQ\";\n\nfunction urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\nexport default class notification extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"configurePushSubscription\", () => {\n      this.setState({\n        loading: true\n      });\n      console.log(\"you are inside the web notification subscription code !!\");\n\n      if (!'Notification' in navigator) {\n        return;\n      }\n\n      let swRef;\n      navigator.serviceWorker.ready.then(sw => {\n        swRef = sw;\n        return swRef.pushManager.getSubscription(); // this allow to get the subscripition \n      }).then(sub => {\n        if (sub === null) {\n          // create a new subscription \n          console.log(\"we dont have the subcription\");\n          return swRef.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n          }).then(subscription => {\n            console.log(\"user is subscribed\", subscription);\n          });\n        } else {\n          // we have a subscription ;\n          console.log(\"we have the subcription\", sub);\n          return sub;\n        }\n      }).then(function (newSub) {\n        // here you have to store this newsbu i.e. your subscription user to database\n        // with the help of newSub Request payload // you get the endpoing and keys {p256dh , auth}\n        // which is used to send the notification to the user \n        console.log(\"this is subsciriton body\", newSub);\n        let urlDb = \"https://pwa-serv-notify.herokuapp.com/api/pwa/subscribe\";\n        return fetch(urlDb, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(newSub)\n        });\n      }).then(function (res) {\n        if (res.ok) {\n          console.log(\"new subscriber is added to DB \", res);\n          this.setState({\n            loading: false\n          });\n          let subBtn = document.getElementById(\"sub-notification\");\n          subBtn.style.display = \"none\";\n        }\n      }).catch(function (err) {\n        this.setState({\n          loading: false\n        });\n        console.log(\"server : App subscriber error \", err);\n      });\n    });\n\n    this.state = {\n      isLoading: false\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Container, null, __jsx(Typography, {\n      children: \"Notification\",\n      variant: \"h6\"\n    }), this.state.isLoading && __jsx(\"h3\", null, \"Loading...\"), __jsx(\"h6\", null, \"Start Notification from server \"), __jsx(\"button\", {\n      onClick: () => this.configurePushSubscription()\n    }, \"Start Server Notification\")));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}